<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.4.2_03) on Tue Jan 27 18:17:37 PST 2004 -->
<TITLE>
XmlParser
</TITLE>

<META NAME="keywords" CONTENT="hhreco.util.aelfred.XmlParser class">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    parent.document.title="XmlParser";
}
</SCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/XmlParser.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../hhreco/util/aelfred/HandlerBase.html" title="class in hhreco.util.aelfred"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="XmlParser.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>

</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
hhreco.util.aelfred</FONT>
<BR>
Class XmlParser</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../../resources/inherit.gif" ALT="extended by"><B>hhreco.util.aelfred.XmlParser</B>
</PRE>
<HR>
<DL>
<DT>public class <B>XmlParser</B><DT>extends java.lang.Object</DL>

<P>
Parse XML documents and return parse events through call-backs.
 <p>You need to define a class implementing the <code>XmlHandler</code>
 interface: an object belonging to this class will receive the
 callbacks for the events.  (As an alternative to implementing
 the full XmlHandler interface, you can simply extend the 
 <code>HandlerBase</code> convenience class.)
 <p>Usage (assuming that <code>MyHandler</code> is your implementation
 of the <code>XmlHandler</code> interface):
 <pre>
 XmlHandler handler = new MyHandler();
 XmlParser parser = new XmlParser();
 parser.setHandler(handler);
 try {
   parser.parse("http://www.host.com/doc.xml", null);
 } catch (Exception e) {
   [do something interesting]
 }
 </pre>
 <p>Alternatively, you can use the standard SAX interfaces
 with the <code>SAXDriver</code> class as your entry point.
<P>

<P>
<DL>
<DT><B>Version:</B></DT>
  <DD>1.1</DD>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlHandler.html" title="interface in hhreco.util.aelfred"><CODE>XmlHandler</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/HandlerBase.html" title="class in hhreco.util.aelfred"><CODE>HandlerBase</CODE></A>, 
<CODE>SAXDriver</CODE></DL>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Field Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_CDATA">ATTRIBUTE_CDATA</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the attribute value is a string value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_DEFAULT_FIXED">ATTRIBUTE_DEFAULT_FIXED</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the attribute was declared #FIXED.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_DEFAULT_IMPLIED">ATTRIBUTE_DEFAULT_IMPLIED</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the attribute was declared #IMPLIED.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_DEFAULT_REQUIRED">ATTRIBUTE_DEFAULT_REQUIRED</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the attribute was declared #REQUIRED.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_DEFAULT_SPECIFIED">ATTRIBUTE_DEFAULT_SPECIFIED</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the attribute has a literal default value specified.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_DEFAULT_UNDECLARED">ATTRIBUTE_DEFAULT_UNDECLARED</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the attribute is not declared.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_ENTITIES">ATTRIBUTE_ENTITIES</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the attribute value is a list of entity names.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_ENTITY">ATTRIBUTE_ENTITY</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the attribute value is the name of an entity.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_ENUMERATED">ATTRIBUTE_ENUMERATED</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the attribute value is a token from an enumeration.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_ID">ATTRIBUTE_ID</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the attribute value is a unique identifier.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_IDREF">ATTRIBUTE_IDREF</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the attribute value is a reference to a unique identifier.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_IDREFS">ATTRIBUTE_IDREFS</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the attribute value is a list of ID references.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_NMTOKEN">ATTRIBUTE_NMTOKEN</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the attribute value is a name token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_NMTOKENS">ATTRIBUTE_NMTOKENS</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the attribute value is a list of name tokens.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_NOTATION">ATTRIBUTE_NOTATION</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the attribute is the name of a notation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_UNDECLARED">ATTRIBUTE_UNDECLARED</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the attribute has not been declared for this element type.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#CONTENT_ANY">CONTENT_ANY</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the element has a content model of ANY.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#CONTENT_ELEMENTS">CONTENT_ELEMENTS</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the element has element content.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#CONTENT_EMPTY">CONTENT_EMPTY</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the element has declared content of EMPTY.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#CONTENT_MIXED">CONTENT_MIXED</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the element has mixed content.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#CONTENT_UNDECLARED">CONTENT_UNDECLARED</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: an element has not been declared.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ENTITY_INTERNAL">ENTITY_INTERNAL</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the entity is internal.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ENTITY_NDATA">ENTITY_NDATA</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the entity is external, non-XML data.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ENTITY_TEXT">ENTITY_TEXT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the entity is external XML data.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ENTITY_UNDECLARED">ENTITY_UNDECLARED</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant: the entity has not been declared.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;<A HREF="../../../hhreco/util/aelfred/XmlHandler.html" title="interface in hhreco.util.aelfred">XmlHandler</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#handler">handler</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#XmlParser()">XmlParser</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Construct a new parser with no associated handler.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#checkEncoding(java.lang.String, boolean)">checkEncoding</A></B>(java.lang.String&nbsp;encodingName,
              boolean&nbsp;ignoreEncoding)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check that the encoding specified makes sense.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#cleanupVariables()">cleanupVariables</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clean up after the parse to allow some garbage collection.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#copyIso8859_1ReadBuffer(int)">copyIso8859_1ReadBuffer</A></B>(int&nbsp;count)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convert a buffer of ISO-8859-1-encoded bytes into UTF-16 characters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#copyUcs2ReadBuffer(int, int, int)">copyUcs2ReadBuffer</A></B>(int&nbsp;count,
                   int&nbsp;shift1,
                   int&nbsp;shift2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convert a buffer of UCS-2-encoded bytes into UTF-16 characters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#copyUcs4ReadBuffer(int, int, int, int, int)">copyUcs4ReadBuffer</A></B>(int&nbsp;count,
                   int&nbsp;shift1,
                   int&nbsp;shift2,
                   int&nbsp;shift3,
                   int&nbsp;shift4)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convert a buffer of UCS-4-encoded bytes into UTF-16 characters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#copyUtf8ReadBuffer(int)">copyUtf8ReadBuffer</A></B>(int&nbsp;count)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convert a buffer of UTF-8-encoded bytes into UTF-16 characters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#dataBufferAppend(char)">dataBufferAppend</A></B>(char&nbsp;c)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add a character to the data buffer.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#dataBufferAppend(char[], int, int)">dataBufferAppend</A></B>(char[]&nbsp;ch,
                 int&nbsp;start,
                 int&nbsp;length)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Append (part of) a character array to the data buffer.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#dataBufferAppend(java.lang.String)">dataBufferAppend</A></B>(java.lang.String&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add a string to the data buffer.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#dataBufferFlush()">dataBufferFlush</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Flush the contents of the data buffer to the handler, if
 appropriate, and reset the buffer for new input.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#dataBufferNormalize()">dataBufferNormalize</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Normalise whitespace in the data buffer.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#dataBufferToString()">dataBufferToString</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convert the data buffer to a string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Enumeration</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#declaredAttributes(java.lang.String)">declaredAttributes</A></B>(java.lang.String&nbsp;elname)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the declared attributes for an element type.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Enumeration</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#declaredElements()">declaredElements</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the declared elements for an XML document.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Enumeration</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#declaredEntities()">declaredEntities</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get declared entities.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.util.Enumeration</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#declaredNotations()">declaredNotations</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get declared notations.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#detectEncoding()">detectEncoding</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Attempt to detect the encoding of an entity.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#encodingError(java.lang.String, int, int)">encodingError</A></B>(java.lang.String&nbsp;message,
              int&nbsp;value,
              int&nbsp;offset)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Report a character encoding error.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#error(java.lang.String, char, java.lang.String)">error</A></B>(java.lang.String&nbsp;message,
      char&nbsp;textFound,
      java.lang.String&nbsp;textExpected)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Report a serious error.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#error(java.lang.String, java.lang.String, java.lang.String)">error</A></B>(java.lang.String&nbsp;message,
      java.lang.String&nbsp;textFound,
      java.lang.String&nbsp;textExpected)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Report an error.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;java.lang.Object</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#extendArray(java.lang.Object, int, int)">extendArray</A></B>(java.lang.Object&nbsp;array,
            int&nbsp;currentSize,
            int&nbsp;requiredSize)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ensure the capacity of an array, allocating a new one if
 necessary.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#filterCR()">filterCR</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Filter carriage returns in the read buffer.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;java.lang.Object[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttribute(java.lang.String, java.lang.String)">getAttribute</A></B>(java.lang.String&nbsp;elName,
             java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retrieve the three-member array representing an
 attribute declaration.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeDefaultValue(java.lang.String, java.lang.String)">getAttributeDefaultValue</A></B>(java.lang.String&nbsp;name,
                         java.lang.String&nbsp;aname)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retrieve the default value of a declared attribute.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeDefaultValueType(java.lang.String, java.lang.String)">getAttributeDefaultValueType</A></B>(java.lang.String&nbsp;name,
                             java.lang.String&nbsp;aname)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retrieve the default value type of a declared attribute.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeEnumeration(java.lang.String, java.lang.String)">getAttributeEnumeration</A></B>(java.lang.String&nbsp;name,
                        java.lang.String&nbsp;aname)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retrieve the allowed values for an enumerated attribute type.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeExpandedValue(java.lang.String, java.lang.String)">getAttributeExpandedValue</A></B>(java.lang.String&nbsp;name,
                          java.lang.String&nbsp;aname)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retrieve the expanded value of a declared attribute.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeType(java.lang.String, java.lang.String)">getAttributeType</A></B>(java.lang.String&nbsp;name,
                 java.lang.String&nbsp;aname)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retrieve the declared type of an attribute.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getColumnNumber()">getColumnNumber</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the current column number.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;java.util.Hashtable</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getElementAttributes(java.lang.String)">getElementAttributes</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Look up the attribute hash table for an element.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getElementContentModel(java.lang.String)">getElementContentModel</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Look up the content model of an element.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getElementContentType(java.lang.String)">getElementContentType</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Look up the content type of an element.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntityNotationName(java.lang.String)">getEntityNotationName</A></B>(java.lang.String&nbsp;eName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the notation name associated with an NDATA entity.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntityPublicId(java.lang.String)">getEntityPublicId</A></B>(java.lang.String&nbsp;ename)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an external entity's public identifier, if any.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntitySystemId(java.lang.String)">getEntitySystemId</A></B>(java.lang.String&nbsp;ename)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an external entity's system identifier.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntityType(java.lang.String)">getEntityType</A></B>(java.lang.String&nbsp;ename)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Find the type of an entity.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntityValue(java.lang.String)">getEntityValue</A></B>(java.lang.String&nbsp;ename)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the value of an internal entity.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getLineNumber()">getLineNumber</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the current line number.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getNextUtf8Byte(int, int)">getNextUtf8Byte</A></B>(int&nbsp;pos,
                int&nbsp;count)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the next byte value in a UTF-8 sequence.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getNotationPublicId(java.lang.String)">getNotationPublicId</A></B>(java.lang.String&nbsp;nname)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Look up the public identifier for a notation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getNotationSystemId(java.lang.String)">getNotationSystemId</A></B>(java.lang.String&nbsp;nname)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Look up the system identifier for a notation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#initializeVariables()">initializeVariables</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Re-initialize the variables for each parse.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#intern(char[], int, int)">intern</A></B>(char[]&nbsp;ch,
       int&nbsp;start,
       int&nbsp;length)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create an internalised string from a character array.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#intern(java.lang.String)">intern</A></B>(java.lang.String&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an internalised version of a string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#isWhitespace(char)">isWhitespace</A></B>(char&nbsp;c)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Test if a character is whitespace.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parse(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)">parse</A></B>(java.lang.String&nbsp;systemId,
      java.lang.String&nbsp;publicId,
      java.io.InputStream&nbsp;stream,
      java.lang.String&nbsp;encoding)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse an XML document from a byte stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parse(java.lang.String, java.lang.String, java.io.Reader)">parse</A></B>(java.lang.String&nbsp;systemId,
      java.lang.String&nbsp;publicId,
      java.io.Reader&nbsp;reader)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse an XML document from a character stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parse(java.lang.String, java.lang.String, java.lang.String)">parse</A></B>(java.lang.String&nbsp;systemId,
      java.lang.String&nbsp;publicId,
      java.lang.String&nbsp;encoding)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse an XML document from a URI.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseAttDef(java.lang.String)">parseAttDef</A></B>(java.lang.String&nbsp;elementName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse a single attribute definition.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseAttlistDecl()">parseAttlistDecl</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse an attribute list declaration.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseAttribute(java.lang.String)">parseAttribute</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse an attribute assignment.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseCDSect()">parseCDSect</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse a CDATA marked section.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseCharRef()">parseCharRef</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read a character reference.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseComment()">parseComment</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Skip a comment.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseConditionalSect()">parseConditionalSect</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse a conditional section.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseContent()">parseContent</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse the content of an element.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseContentspec(java.lang.String)">parseContentspec</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Content specification.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseCp()">parseCp</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse a content particle.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseDefault(java.lang.String, java.lang.String, int, java.lang.String)">parseDefault</A></B>(java.lang.String&nbsp;elementName,
             java.lang.String&nbsp;name,
             int&nbsp;type,
             java.lang.String&nbsp;enum)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse the default value for an attribute.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseDoctypedecl()">parseDoctypedecl</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse a document type declaration.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseDocument()">parseDocument</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse an XML document.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseElement()">parseElement</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse an element, with its tags.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseElementdecl()">parseElementdecl</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse an element type declaration.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseElements()">parseElements</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse an element-content model.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseEntityDecl()">parseEntityDecl</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse an entity declaration.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseEntityRef(boolean)">parseEntityRef</A></B>(boolean&nbsp;externalAllowed)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse a reference.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseEnumeration()">parseEnumeration</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse an enumeration.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseEq()">parseEq</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse an equals sign surrounded by optional whitespace.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseETag()">parseETag</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse an end tag.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseMarkupdecl()">parseMarkupdecl</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse a markup declaration in the internal or external DTD subset.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseMisc()">parseMisc</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse miscellaneous markup outside the document element and DOCTYPE
 declaration.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseMixed()">parseMixed</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse mixed content.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseNotationDecl()">parseNotationDecl</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse a notation declaration.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseNotationType()">parseNotationType</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse a notation type for an attribute.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parsePCData()">parsePCData</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse PCDATA.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parsePEReference(boolean)">parsePEReference</A></B>(boolean&nbsp;isEntityValue)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse a parameter entity reference.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parsePI()">parsePI</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse a processing instruction and do a call-back.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseProlog()">parseProlog</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse the prolog of an XML document.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseTextDecl(boolean)">parseTextDecl</A></B>(boolean&nbsp;ignoreEncoding)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse the Encoding PI.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseUntil(java.lang.String)">parseUntil</A></B>(java.lang.String&nbsp;delim)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read all data until we find the specified string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseWhitespace()">parseWhitespace</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse whitespace characters, and leave them in the data buffer.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseXMLDecl(boolean)">parseXMLDecl</A></B>(boolean&nbsp;ignoreEncoding)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse the XML declaration.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#popInput()">popInput</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Restore a previous input source.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#pushCharArray(java.lang.String, char[], int, int)">pushCharArray</A></B>(java.lang.String&nbsp;ename,
              char[]&nbsp;ch,
              int&nbsp;start,
              int&nbsp;length)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Push a new internal input source.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#pushInput(java.lang.String)">pushInput</A></B>(java.lang.String&nbsp;ename)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Save the current input source onto the stack.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#pushString(java.lang.String, java.lang.String)">pushString</A></B>(java.lang.String&nbsp;ename,
           java.lang.String&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method pushes a string back onto input.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#pushURL(java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String)">pushURL</A></B>(java.lang.String&nbsp;ename,
        java.lang.String&nbsp;publicId,
        java.lang.String&nbsp;systemId,
        java.io.Reader&nbsp;reader,
        java.io.InputStream&nbsp;stream,
        java.lang.String&nbsp;encoding)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Push a new external input source.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#read8bitEncodingDeclaration()">read8bitEncodingDeclaration</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read just the encoding declaration (or XML declaration) at the 
 start of an external entity.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#readAttType()">readAttType</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parse the attribute type.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;char</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#readCh()">readCh</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read a single character from the readBuffer.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#readDataChunk()">readDataChunk</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read a chunk of data from an external input source.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#readExternalIds(boolean)">readExternalIds</A></B>(boolean&nbsp;inNotation)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Try reading external identifiers.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#readLiteral(int)">readLiteral</A></B>(int&nbsp;flags)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read a literal.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#readNmtoken(boolean)">readNmtoken</A></B>(boolean&nbsp;isName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read a name or name token.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#require(char)">require</A></B>(char&nbsp;delim)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Require a character to appear, or throw an exception.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#require(java.lang.String)">require</A></B>(java.lang.String&nbsp;delim)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Require a string to appear, or throw an exception.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#requireWhitespace()">requireWhitespace</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Require whitespace characters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#setAttribute(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, int)">setAttribute</A></B>(java.lang.String&nbsp;elName,
             java.lang.String&nbsp;name,
             int&nbsp;type,
             java.lang.String&nbsp;enumeration,
             java.lang.String&nbsp;value,
             int&nbsp;valueType)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register an attribute declaration for later retrieval.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#setElement(java.lang.String, int, java.lang.String, java.util.Hashtable)">setElement</A></B>(java.lang.String&nbsp;name,
           int&nbsp;contentType,
           java.lang.String&nbsp;contentModel,
           java.util.Hashtable&nbsp;attributes)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register an element.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#setEntity(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String)">setEntity</A></B>(java.lang.String&nbsp;eName,
          int&nbsp;eClass,
          java.lang.String&nbsp;pubid,
          java.lang.String&nbsp;sysid,
          java.lang.String&nbsp;value,
          java.lang.String&nbsp;nName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register an entity declaration for later retrieval.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#setExternalDataEntity(java.lang.String, java.lang.String, java.lang.String, java.lang.String)">setExternalDataEntity</A></B>(java.lang.String&nbsp;eName,
                      java.lang.String&nbsp;pubid,
                      java.lang.String&nbsp;sysid,
                      java.lang.String&nbsp;nName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register an external data entity.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#setExternalTextEntity(java.lang.String, java.lang.String, java.lang.String)">setExternalTextEntity</A></B>(java.lang.String&nbsp;eName,
                      java.lang.String&nbsp;pubid,
                      java.lang.String&nbsp;sysid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register an external text entity.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#setHandler(hhreco.util.aelfred.XmlHandler)">setHandler</A></B>(<A HREF="../../../hhreco/util/aelfred/XmlHandler.html" title="interface in hhreco.util.aelfred">XmlHandler</A>&nbsp;handler)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the handler that will receive parsing events.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#setInternalEntity(java.lang.String, java.lang.String)">setInternalEntity</A></B>(java.lang.String&nbsp;eName,
                  java.lang.String&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register an entity declaration for later retrieval.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#setNotation(java.lang.String, java.lang.String, java.lang.String)">setNotation</A></B>(java.lang.String&nbsp;nname,
            java.lang.String&nbsp;pubid,
            java.lang.String&nbsp;sysid)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register a notation declaration for later retrieval.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#skipUntil(java.lang.String)">skipUntil</A></B>(java.lang.String&nbsp;delim)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Skip all data until we find the specified string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#skipWhitespace()">skipWhitespace</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Skip whitespace characters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#tryEncoding(byte[], byte, byte)">tryEncoding</A></B>(byte[]&nbsp;sig,
            byte&nbsp;b1,
            byte&nbsp;b2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check for a two-byte signature.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#tryEncoding(byte[], byte, byte, byte, byte)">tryEncoding</A></B>(byte[]&nbsp;sig,
            byte&nbsp;b1,
            byte&nbsp;b2,
            byte&nbsp;b3,
            byte&nbsp;b4)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check for a four-byte signature.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#tryEncodingDecl(boolean)">tryEncodingDecl</A></B>(boolean&nbsp;ignoreEncoding)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check for an encoding declaration.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#tryRead(char)">tryRead</A></B>(char&nbsp;delim)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return true if we can read the expected character.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#tryRead(java.lang.String)">tryRead</A></B>(java.lang.String&nbsp;delim)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return true if we can read the expected string.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#tryWhitespace()">tryWhitespace</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return true if we can read some whitespace.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#unread(char)">unread</A></B>(char&nbsp;c)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Push a single character back onto the current input stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>(package private) &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../hhreco/util/aelfred/XmlParser.html#unread(char[], int)">unread</A></B>(char[]&nbsp;ch,
       int&nbsp;length)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Push a char array back onto the current input stream.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Field Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="CONTENT_UNDECLARED"><!-- --></A><H3>
CONTENT_UNDECLARED</H3>
<PRE>
public static final int <B>CONTENT_UNDECLARED</B></PRE>
<DL>
<DD>Constant: an element has not been declared.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getElementContentType(java.lang.String)"><CODE>getElementContentType(java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.CONTENT_UNDECLARED">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="CONTENT_ANY"><!-- --></A><H3>
CONTENT_ANY</H3>
<PRE>
public static final int <B>CONTENT_ANY</B></PRE>
<DL>
<DD>Constant: the element has a content model of ANY.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getElementContentType(java.lang.String)"><CODE>getElementContentType(java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.CONTENT_ANY">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="CONTENT_EMPTY"><!-- --></A><H3>
CONTENT_EMPTY</H3>
<PRE>
public static final int <B>CONTENT_EMPTY</B></PRE>
<DL>
<DD>Constant: the element has declared content of EMPTY.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getElementContentType(java.lang.String)"><CODE>getElementContentType(java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.CONTENT_EMPTY">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="CONTENT_MIXED"><!-- --></A><H3>
CONTENT_MIXED</H3>
<PRE>
public static final int <B>CONTENT_MIXED</B></PRE>
<DL>
<DD>Constant: the element has mixed content.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getElementContentType(java.lang.String)"><CODE>getElementContentType(java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.CONTENT_MIXED">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="CONTENT_ELEMENTS"><!-- --></A><H3>
CONTENT_ELEMENTS</H3>
<PRE>
public static final int <B>CONTENT_ELEMENTS</B></PRE>
<DL>
<DD>Constant: the element has element content.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getElementContentType(java.lang.String)"><CODE>getElementContentType(java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.CONTENT_ELEMENTS">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ENTITY_UNDECLARED"><!-- --></A><H3>
ENTITY_UNDECLARED</H3>
<PRE>
public static final int <B>ENTITY_UNDECLARED</B></PRE>
<DL>
<DD>Constant: the entity has not been declared.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntityType(java.lang.String)"><CODE>getEntityType(java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ENTITY_UNDECLARED">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ENTITY_INTERNAL"><!-- --></A><H3>
ENTITY_INTERNAL</H3>
<PRE>
public static final int <B>ENTITY_INTERNAL</B></PRE>
<DL>
<DD>Constant: the entity is internal.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntityType(java.lang.String)"><CODE>getEntityType(java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ENTITY_INTERNAL">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ENTITY_NDATA"><!-- --></A><H3>
ENTITY_NDATA</H3>
<PRE>
public static final int <B>ENTITY_NDATA</B></PRE>
<DL>
<DD>Constant: the entity is external, non-XML data.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntityType(java.lang.String)"><CODE>getEntityType(java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ENTITY_NDATA">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ENTITY_TEXT"><!-- --></A><H3>
ENTITY_TEXT</H3>
<PRE>
public static final int <B>ENTITY_TEXT</B></PRE>
<DL>
<DD>Constant: the entity is external XML data.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntityType(java.lang.String)"><CODE>getEntityType(java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ENTITY_TEXT">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ATTRIBUTE_UNDECLARED"><!-- --></A><H3>
ATTRIBUTE_UNDECLARED</H3>
<PRE>
public static final int <B>ATTRIBUTE_UNDECLARED</B></PRE>
<DL>
<DD>Constant: the attribute has not been declared for this element type.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeType(java.lang.String, java.lang.String)"><CODE>getAttributeType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ATTRIBUTE_UNDECLARED">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ATTRIBUTE_CDATA"><!-- --></A><H3>
ATTRIBUTE_CDATA</H3>
<PRE>
public static final int <B>ATTRIBUTE_CDATA</B></PRE>
<DL>
<DD>Constant: the attribute value is a string value.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeType(java.lang.String, java.lang.String)"><CODE>getAttributeType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ATTRIBUTE_CDATA">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ATTRIBUTE_ID"><!-- --></A><H3>
ATTRIBUTE_ID</H3>
<PRE>
public static final int <B>ATTRIBUTE_ID</B></PRE>
<DL>
<DD>Constant: the attribute value is a unique identifier.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeType(java.lang.String, java.lang.String)"><CODE>getAttributeType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ATTRIBUTE_ID">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ATTRIBUTE_IDREF"><!-- --></A><H3>
ATTRIBUTE_IDREF</H3>
<PRE>
public static final int <B>ATTRIBUTE_IDREF</B></PRE>
<DL>
<DD>Constant: the attribute value is a reference to a unique identifier.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeType(java.lang.String, java.lang.String)"><CODE>getAttributeType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ATTRIBUTE_IDREF">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ATTRIBUTE_IDREFS"><!-- --></A><H3>
ATTRIBUTE_IDREFS</H3>
<PRE>
public static final int <B>ATTRIBUTE_IDREFS</B></PRE>
<DL>
<DD>Constant: the attribute value is a list of ID references.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeType(java.lang.String, java.lang.String)"><CODE>getAttributeType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ATTRIBUTE_IDREFS">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ATTRIBUTE_ENTITY"><!-- --></A><H3>
ATTRIBUTE_ENTITY</H3>
<PRE>
public static final int <B>ATTRIBUTE_ENTITY</B></PRE>
<DL>
<DD>Constant: the attribute value is the name of an entity.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeType(java.lang.String, java.lang.String)"><CODE>getAttributeType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ATTRIBUTE_ENTITY">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ATTRIBUTE_ENTITIES"><!-- --></A><H3>
ATTRIBUTE_ENTITIES</H3>
<PRE>
public static final int <B>ATTRIBUTE_ENTITIES</B></PRE>
<DL>
<DD>Constant: the attribute value is a list of entity names.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeType(java.lang.String, java.lang.String)"><CODE>getAttributeType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ATTRIBUTE_ENTITIES">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ATTRIBUTE_NMTOKEN"><!-- --></A><H3>
ATTRIBUTE_NMTOKEN</H3>
<PRE>
public static final int <B>ATTRIBUTE_NMTOKEN</B></PRE>
<DL>
<DD>Constant: the attribute value is a name token.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeType(java.lang.String, java.lang.String)"><CODE>getAttributeType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ATTRIBUTE_NMTOKEN">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ATTRIBUTE_NMTOKENS"><!-- --></A><H3>
ATTRIBUTE_NMTOKENS</H3>
<PRE>
public static final int <B>ATTRIBUTE_NMTOKENS</B></PRE>
<DL>
<DD>Constant: the attribute value is a list of name tokens.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeType(java.lang.String, java.lang.String)"><CODE>getAttributeType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ATTRIBUTE_NMTOKENS">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ATTRIBUTE_ENUMERATED"><!-- --></A><H3>
ATTRIBUTE_ENUMERATED</H3>
<PRE>
public static final int <B>ATTRIBUTE_ENUMERATED</B></PRE>
<DL>
<DD>Constant: the attribute value is a token from an enumeration.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeType(java.lang.String, java.lang.String)"><CODE>getAttributeType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ATTRIBUTE_ENUMERATED">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ATTRIBUTE_NOTATION"><!-- --></A><H3>
ATTRIBUTE_NOTATION</H3>
<PRE>
public static final int <B>ATTRIBUTE_NOTATION</B></PRE>
<DL>
<DD>Constant: the attribute is the name of a notation.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeType(java.lang.String, java.lang.String)"><CODE>getAttributeType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ATTRIBUTE_NOTATION">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ATTRIBUTE_DEFAULT_UNDECLARED"><!-- --></A><H3>
ATTRIBUTE_DEFAULT_UNDECLARED</H3>
<PRE>
public static final int <B>ATTRIBUTE_DEFAULT_UNDECLARED</B></PRE>
<DL>
<DD>Constant: the attribute is not declared.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeDefaultValueType(java.lang.String, java.lang.String)"><CODE>getAttributeDefaultValueType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ATTRIBUTE_DEFAULT_UNDECLARED">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ATTRIBUTE_DEFAULT_SPECIFIED"><!-- --></A><H3>
ATTRIBUTE_DEFAULT_SPECIFIED</H3>
<PRE>
public static final int <B>ATTRIBUTE_DEFAULT_SPECIFIED</B></PRE>
<DL>
<DD>Constant: the attribute has a literal default value specified.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeDefaultValueType(java.lang.String, java.lang.String)"><CODE>getAttributeDefaultValueType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeDefaultValue(java.lang.String, java.lang.String)"><CODE>getAttributeDefaultValue(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ATTRIBUTE_DEFAULT_SPECIFIED">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ATTRIBUTE_DEFAULT_IMPLIED"><!-- --></A><H3>
ATTRIBUTE_DEFAULT_IMPLIED</H3>
<PRE>
public static final int <B>ATTRIBUTE_DEFAULT_IMPLIED</B></PRE>
<DL>
<DD>Constant: the attribute was declared #IMPLIED.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeDefaultValueType(java.lang.String, java.lang.String)"><CODE>getAttributeDefaultValueType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ATTRIBUTE_DEFAULT_IMPLIED">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ATTRIBUTE_DEFAULT_REQUIRED"><!-- --></A><H3>
ATTRIBUTE_DEFAULT_REQUIRED</H3>
<PRE>
public static final int <B>ATTRIBUTE_DEFAULT_REQUIRED</B></PRE>
<DL>
<DD>Constant: the attribute was declared #REQUIRED.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeDefaultValueType(java.lang.String, java.lang.String)"><CODE>getAttributeDefaultValueType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ATTRIBUTE_DEFAULT_REQUIRED">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ATTRIBUTE_DEFAULT_FIXED"><!-- --></A><H3>
ATTRIBUTE_DEFAULT_FIXED</H3>
<PRE>
public static final int <B>ATTRIBUTE_DEFAULT_FIXED</B></PRE>
<DL>
<DD>Constant: the attribute was declared #FIXED.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeDefaultValueType(java.lang.String, java.lang.String)"><CODE>getAttributeDefaultValueType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeDefaultValue(java.lang.String, java.lang.String)"><CODE>getAttributeDefaultValue(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../constant-values.html#hhreco.util.aelfred.XmlParser.ATTRIBUTE_DEFAULT_FIXED">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="handler"><!-- --></A><H3>
handler</H3>
<PRE>
<A HREF="../../../hhreco/util/aelfred/XmlHandler.html" title="interface in hhreco.util.aelfred">XmlHandler</A> <B>handler</B></PRE>
<DL>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="XmlParser()"><!-- --></A><H3>
XmlParser</H3>
<PRE>
public <B>XmlParser</B>()</PRE>
<DL>
<DD>Construct a new parser with no associated handler.
<P>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#setHandler(hhreco.util.aelfred.XmlHandler)"><CODE>setHandler(hhreco.util.aelfred.XmlHandler)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#parse(java.lang.String, java.lang.String, java.lang.String)"><CODE>parse(java.lang.String, java.lang.String, java.lang.String)</CODE></A></DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="setHandler(hhreco.util.aelfred.XmlHandler)"><!-- --></A><H3>
setHandler</H3>
<PRE>
public void <B>setHandler</B>(<A HREF="../../../hhreco/util/aelfred/XmlHandler.html" title="interface in hhreco.util.aelfred">XmlHandler</A>&nbsp;handler)</PRE>
<DL>
<DD>Set the handler that will receive parsing events.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>handler</CODE> - The handler to receive callback events.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parse(java.lang.String, java.lang.String, java.lang.String)"><CODE>parse(java.lang.String, java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlHandler.html" title="interface in hhreco.util.aelfred"><CODE>XmlHandler</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="parse(java.lang.String, java.lang.String, java.lang.String)"><!-- --></A><H3>
parse</H3>
<PRE>
public void <B>parse</B>(java.lang.String&nbsp;systemId,
                  java.lang.String&nbsp;publicId,
                  java.lang.String&nbsp;encoding)
           throws java.lang.Exception</PRE>
<DL>
<DD>Parse an XML document from a URI.
 <p>You may parse a document more than once, but only one thread
 may call this method for an object at one time.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>systemId</CODE> - The URI of the document.<DD><CODE>publicId</CODE> - The public identifier of the document, or null.<DD><CODE>encoding</CODE> - The suggested encoding, or null if unknown.
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE> - Any exception thrown by your
            own handlers, or any derivation of java.io.IOException
            thrown by the parser itself.</DL>
</DD>
</DL>
<HR>

<A NAME="parse(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)"><!-- --></A><H3>
parse</H3>
<PRE>
public void <B>parse</B>(java.lang.String&nbsp;systemId,
                  java.lang.String&nbsp;publicId,
                  java.io.InputStream&nbsp;stream,
                  java.lang.String&nbsp;encoding)
           throws java.lang.Exception</PRE>
<DL>
<DD>Parse an XML document from a byte stream.
 <p>The URI that you supply will become the base URI for
 resolving relative links, but &AElig;lfred will actually read
 the document from the supplied input stream.
 <p>You may parse a document more than once, but only one thread
 may call this method for an object at one time.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>systemId</CODE> - The base URI of the document, or null if not
                 known.<DD><CODE>publicId</CODE> - The public identifier of the document, or null
                 if not known.<DD><CODE>stream</CODE> - A byte input stream.<DD><CODE>encoding</CODE> - The suggested encoding, or null if unknown.
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE> - Any exception thrown by your
            own handlers, or any derivation of java.io.IOException
            thrown by the parser itself.</DL>
</DD>
</DL>
<HR>

<A NAME="parse(java.lang.String, java.lang.String, java.io.Reader)"><!-- --></A><H3>
parse</H3>
<PRE>
public void <B>parse</B>(java.lang.String&nbsp;systemId,
                  java.lang.String&nbsp;publicId,
                  java.io.Reader&nbsp;reader)
           throws java.lang.Exception</PRE>
<DL>
<DD>Parse an XML document from a character stream.
 <p>The URI that you supply will become the base URI for
 resolving relative links, but &AElig;lfred will actually read
 the document from the supplied input stream.
 <p>You may parse a document more than once, but only one thread
 may call this method for an object at one time.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>systemId</CODE> - The base URI of the document, or null if not
                 known.<DD><CODE>publicId</CODE> - The public identifier of the document, or null
                 if not known.<DD><CODE>reader</CODE> - A character stream.
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE> - Any exception thrown by your
            own handlers, or any derivation of java.io.IOException
            thrown by the parser itself.</DL>
</DD>
</DL>
<HR>

<A NAME="error(java.lang.String, java.lang.String, java.lang.String)"><!-- --></A><H3>
error</H3>
<PRE>
void <B>error</B>(java.lang.String&nbsp;message,
           java.lang.String&nbsp;textFound,
           java.lang.String&nbsp;textExpected)
     throws java.lang.Exception</PRE>
<DL>
<DD>Report an error.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>message</CODE> - The error message.<DD><CODE>textFound</CODE> - The text that caused the error (or null).
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlHandler.html#error(java.lang.String, java.lang.String, int, int)"><CODE>XmlHandler.error(java.lang.String, java.lang.String, int, int)</CODE></A>, 
<CODE>#line</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="error(java.lang.String, char, java.lang.String)"><!-- --></A><H3>
error</H3>
<PRE>
void <B>error</B>(java.lang.String&nbsp;message,
           char&nbsp;textFound,
           java.lang.String&nbsp;textExpected)
     throws java.lang.Exception</PRE>
<DL>
<DD>Report a serious error.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>message</CODE> - The error message.<DD><CODE>textFound</CODE> - The text that caused the error (or null).
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseDocument()"><!-- --></A><H3>
parseDocument</H3>
<PRE>
void <B>parseDocument</B>()
             throws java.lang.Exception</PRE>
<DL>
<DD>Parse an XML document.
 <pre>
 [1] document ::= prolog element Misc*
 </pre>
 <p>This is the top-level parsing function for a single XML
 document.  As a minimum, a well-formed document must have
 a document element, and a valid document must have a prolog
 as well.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseComment()"><!-- --></A><H3>
parseComment</H3>
<PRE>
void <B>parseComment</B>()
            throws java.lang.Exception</PRE>
<DL>
<DD>Skip a comment.
 <pre>
 [18] Comment ::= '&lt;!--' ((Char - '-') | ('-' (Char - '-')))* "-->"
 </pre>
 <p>(The <code>&lt;!--</code> has already been read.)
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parsePI()"><!-- --></A><H3>
parsePI</H3>
<PRE>
void <B>parsePI</B>()
       throws java.lang.Exception</PRE>
<DL>
<DD>Parse a processing instruction and do a call-back.
 <pre>
 [19] PI ::= '&lt;?' Name (S (Char* - (Char* '?&gt;' Char*)))? '?&gt;'
 </pre>
 <p>(The <code>&lt;?</code> has already been read.)
 <p>An XML processing instruction <em>must</em> begin with
 a Name, which is the instruction's target.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseCDSect()"><!-- --></A><H3>
parseCDSect</H3>
<PRE>
void <B>parseCDSect</B>()
           throws java.lang.Exception</PRE>
<DL>
<DD>Parse a CDATA marked section.
 <pre>
 [20] CDSect ::= CDStart CData CDEnd
 [21] CDStart ::= '&lt;![CDATA['
 [22] CData ::= (Char* - (Char* ']]&gt;' Char*))
 [23] CDEnd ::= ']]&gt;'
 </pre>
 <p>(The '&lt;![CDATA[' has already been read.)
 <p>Note that this just appends characters to the dataBuffer,
 without actually generating an event.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseProlog()"><!-- --></A><H3>
parseProlog</H3>
<PRE>
void <B>parseProlog</B>()
           throws java.lang.Exception</PRE>
<DL>
<DD>Parse the prolog of an XML document.
 <pre>
 [24] prolog ::= XMLDecl? Misc* (Doctypedecl Misc*)?
 </pre>
 <p>There are a couple of tricks here.  First, it is necessary to
 declare the XML default attributes after the DTD (if present)
 has been read.  Second, it is not possible to expand general
 references in attribute value literals until after the entire
 DTD (if present) has been parsed.
 <p>We do not look for the XML declaration here, because it is
 handled by pushURL().
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><CODE>pushURL</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseXMLDecl(boolean)"><!-- --></A><H3>
parseXMLDecl</H3>
<PRE>
void <B>parseXMLDecl</B>(boolean&nbsp;ignoreEncoding)
            throws java.lang.Exception</PRE>
<DL>
<DD>Parse the XML declaration.
 <pre>
 [25] XMLDecl ::= '&lt;?xml' VersionInfo EncodingDecl? SDDecl? S? '?&gt;'
 [26] VersionInfo ::= S 'version' Eq ('"1.0"' | "'1.0'")
 [33] SDDecl ::= S 'standalone' Eq "'" ('yes' | 'no') "'"
               | S 'standalone' Eq '"' ("yes" | "no") '"'
 [78] EncodingDecl ::= S 'encoding' Eq QEncoding
 </pre>
 <p>([80] to [82] are also significant.)
 <p>(The <code>&lt;?xml</code> and whitespace have already been read.)
 <p>TODO: validate value of standalone.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseTextDecl(boolean)"><CODE>parseTextDecl(boolean)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#checkEncoding(java.lang.String, boolean)"><CODE>checkEncoding(java.lang.String, boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="parseTextDecl(boolean)"><!-- --></A><H3>
parseTextDecl</H3>
<PRE>
void <B>parseTextDecl</B>(boolean&nbsp;ignoreEncoding)
             throws java.lang.Exception</PRE>
<DL>
<DD>Parse the Encoding PI.
 <pre>
 [78] EncodingDecl ::= S 'encoding' Eq QEncoding
 [79] EncodingPI ::= '&lt;?xml' S 'encoding' Eq QEncoding S? '?&gt;'
 [80] QEncoding ::= '"' Encoding '"' | "'" Encoding "'"
 [81] Encoding ::= LatinName
 [82] LatinName ::= [A-Za-z] ([A-Za-z0-9._] | '-')*
 </pre>
 <p>(The <code>&lt;?xml</code>' and whitespace have already been read.)
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseXMLDecl(boolean)"><CODE>parseXMLDecl(boolean)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#checkEncoding(java.lang.String, boolean)"><CODE>checkEncoding(java.lang.String, boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="checkEncoding(java.lang.String, boolean)"><!-- --></A><H3>
checkEncoding</H3>
<PRE>
void <B>checkEncoding</B>(java.lang.String&nbsp;encodingName,
                   boolean&nbsp;ignoreEncoding)
             throws java.lang.Exception</PRE>
<DL>
<DD>Check that the encoding specified makes sense.
 <p>Compare what the author has specified in the XML declaration
 or encoding PI with what we have detected.
 <p>This is also important for distinguishing among the various
 7- and 8-bit encodings, such as ISO-LATIN-1 (I cannot autodetect
 those).
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>encodingName</CODE> - The name of the encoding specified by the user.
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseXMLDecl(boolean)"><CODE>parseXMLDecl(boolean)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#parseTextDecl(boolean)"><CODE>parseTextDecl(boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="parseMisc()"><!-- --></A><H3>
parseMisc</H3>
<PRE>
void <B>parseMisc</B>()
         throws java.lang.Exception</PRE>
<DL>
<DD>Parse miscellaneous markup outside the document element and DOCTYPE
 declaration.
 <pre>
 [27] Misc ::= Comment | PI | S
 </pre>
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseDoctypedecl()"><!-- --></A><H3>
parseDoctypedecl</H3>
<PRE>
void <B>parseDoctypedecl</B>()
                throws java.lang.Exception</PRE>
<DL>
<DD>Parse a document type declaration.
 <pre>
 [28] doctypedecl ::= '&lt;!DOCTYPE' S Name (S ExternalID)? S?
                      ('[' %markupdecl* ']' S?)? '&gt;'
 </pre>
 <p>(The <code>&lt;!DOCTYPE</code> has already been read.)
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseMarkupdecl()"><!-- --></A><H3>
parseMarkupdecl</H3>
<PRE>
void <B>parseMarkupdecl</B>()
               throws java.lang.Exception</PRE>
<DL>
<DD>Parse a markup declaration in the internal or external DTD subset.
 <pre>
 [29] markupdecl ::= ( %elementdecl | %AttlistDecl | %EntityDecl |
                       %NotationDecl | %PI | %S | %Comment |
                       InternalPERef )
 [30] InternalPERef ::= PEReference
 [31] extSubset ::= (%markupdecl | %conditionalSect)*
 </pre>
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseElement()"><!-- --></A><H3>
parseElement</H3>
<PRE>
void <B>parseElement</B>()
            throws java.lang.Exception</PRE>
<DL>
<DD>Parse an element, with its tags.
 <pre>
 [33] STag ::= '&lt;' Name (S Attribute)* S? '&gt;' [WFC: unique Att spec]
 [38] element ::= EmptyElement | STag content ETag
 [39] EmptyElement ::= '&lt;' Name (S Attribute)* S? '/&gt;'
                       [WFC: unique Att spec]
 </pre>
 <p>(The '&lt;' has already been read.)
 <p>NOTE: this method actually chains onto parseContent(), if necessary,
 and parseContent() will take care of calling parseETag().
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseAttribute(java.lang.String)"><!-- --></A><H3>
parseAttribute</H3>
<PRE>
void <B>parseAttribute</B>(java.lang.String&nbsp;name)
              throws java.lang.Exception</PRE>
<DL>
<DD>Parse an attribute assignment.
 <pre>
 [34] Attribute ::= Name Eq AttValue
 </pre>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The name of the attribute's element.
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlHandler.html#attribute(java.lang.String, java.lang.String, boolean)"><CODE>XmlHandler.attribute(java.lang.String, java.lang.String, boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="parseEq()"><!-- --></A><H3>
parseEq</H3>
<PRE>
void <B>parseEq</B>()
       throws java.lang.Exception</PRE>
<DL>
<DD>Parse an equals sign surrounded by optional whitespace.
 [35] Eq ::= S? '=' S?
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseETag()"><!-- --></A><H3>
parseETag</H3>
<PRE>
void <B>parseETag</B>()
         throws java.lang.Exception</PRE>
<DL>
<DD>Parse an end tag.
 [36] ETag ::= '</' Name S? '>'
 *NOTE: parseContent() chains to here.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseContent()"><!-- --></A><H3>
parseContent</H3>
<PRE>
void <B>parseContent</B>()
            throws java.lang.Exception</PRE>
<DL>
<DD>Parse the content of an element.
 [37] content ::= (element | PCData | Reference | CDSect | PI | Comment)*
 [68] Reference ::= EntityRef | CharRef
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseElementdecl()"><!-- --></A><H3>
parseElementdecl</H3>
<PRE>
void <B>parseElementdecl</B>()
                throws java.lang.Exception</PRE>
<DL>
<DD>Parse an element type declaration.
 [40] elementdecl ::= '<!ELEMENT' S %Name S (%S S)? %contentspec S? '>'
                      [VC: Unique Element Declaration]
 *NOTE: the '<!ELEMENT' has already been read.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseContentspec(java.lang.String)"><!-- --></A><H3>
parseContentspec</H3>
<PRE>
void <B>parseContentspec</B>(java.lang.String&nbsp;name)
                throws java.lang.Exception</PRE>
<DL>
<DD>Content specification.
 [41] contentspec ::= 'EMPTY' | 'ANY' | Mixed | elements
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseElements()"><!-- --></A><H3>
parseElements</H3>
<PRE>
void <B>parseElements</B>()
             throws java.lang.Exception</PRE>
<DL>
<DD>Parse an element-content model.
 [42] elements ::= (choice | seq) ('?' | '*' | '+')?
 [44] cps ::= S? %cp S?
 [45] choice ::= '(' S? %ctokplus (S? '|' S? %ctoks)* S? ')'
 [46] ctokplus ::= cps ('|' cps)+
 [47] ctoks ::= cps ('|' cps)*
 [48] seq ::= '(' S? %stoks (S? ',' S? %stoks)* S? ')'
 [49] stoks ::= cps (',' cps)*
 *NOTE: the opening '(' and S have already been read.
 *TODO: go over parameter entity boundaries more carefully.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseCp()"><!-- --></A><H3>
parseCp</H3>
<PRE>
void <B>parseCp</B>()
       throws java.lang.Exception</PRE>
<DL>
<DD>Parse a content particle.
 [43] cp ::= (Name | choice | seq) ('?' | '*' | '+')
 *NOTE: I actually use a slightly different production here:
        cp ::= (elements | (Name ('?' | '*' | '+')?))
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseMixed()"><!-- --></A><H3>
parseMixed</H3>
<PRE>
void <B>parseMixed</B>()
          throws java.lang.Exception</PRE>
<DL>
<DD>Parse mixed content.
 [50] Mixed ::= '(' S? %( %'#PCDATA' (S? '|' S? %Mtoks)* ) S? ')*'
              | '(' S? %('#PCDATA') S? ')'
 [51] Mtoks ::= %Name (S? '|' S? %Name)*
 *NOTE: the S and '#PCDATA' have already been read.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseAttlistDecl()"><!-- --></A><H3>
parseAttlistDecl</H3>
<PRE>
void <B>parseAttlistDecl</B>()
                throws java.lang.Exception</PRE>
<DL>
<DD>Parse an attribute list declaration.
 [52] AttlistDecl ::= '<!ATTLIST' S %Name S? %AttDef+ S? '>'
 *NOTE: the '<!ATTLIST' has already been read.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseAttDef(java.lang.String)"><!-- --></A><H3>
parseAttDef</H3>
<PRE>
void <B>parseAttDef</B>(java.lang.String&nbsp;elementName)
           throws java.lang.Exception</PRE>
<DL>
<DD>Parse a single attribute definition.
 [53] AttDef ::= S %Name S %AttType S %Default
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="readAttType()"><!-- --></A><H3>
readAttType</H3>
<PRE>
int <B>readAttType</B>()
          throws java.lang.Exception</PRE>
<DL>
<DD>Parse the attribute type.
 [54] AttType ::= StringType | TokenizedType | EnumeratedType
 [55] StringType ::= 'CDATA'
 [56] TokenizedType ::= 'ID' | 'IDREF' | 'IDREFS' | 'ENTITY' | 'ENTITIES' |
                        'NMTOKEN' | 'NMTOKENS'
 [57] EnumeratedType ::= NotationType | Enumeration
 *TODO: validate the type!!
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseEnumeration()"><!-- --></A><H3>
parseEnumeration</H3>
<PRE>
void <B>parseEnumeration</B>()
                throws java.lang.Exception</PRE>
<DL>
<DD>Parse an enumeration.
 [60] Enumeration ::= '(' S? %Etoks (S? '|' S? %Etoks)* S? ')'
 [61] Etoks ::= %Nmtoken (S? '|' S? %Nmtoken)*
 *NOTE: the '(' has already been read.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseNotationType()"><!-- --></A><H3>
parseNotationType</H3>
<PRE>
void <B>parseNotationType</B>()
                 throws java.lang.Exception</PRE>
<DL>
<DD>Parse a notation type for an attribute.
 [58] NotationType ::= %'NOTATION' S '(' S? %Ntoks (S? '|' S? %Ntoks)*
                       S? ')'
 [59] Ntoks ::= %Name (S? '|' S? %Name)
 *NOTE: the 'NOTATION' has already been read
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseDefault(java.lang.String, java.lang.String, int, java.lang.String)"><!-- --></A><H3>
parseDefault</H3>
<PRE>
void <B>parseDefault</B>(java.lang.String&nbsp;elementName,
                  java.lang.String&nbsp;name,
                  int&nbsp;type,
                  java.lang.String&nbsp;enum)
            throws java.lang.Exception</PRE>
<DL>
<DD>Parse the default value for an attribute.
 [62] Default ::= '#REQUIRED' | '#IMPLIED' | ((%'#FIXED' S)? %AttValue
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseConditionalSect()"><!-- --></A><H3>
parseConditionalSect</H3>
<PRE>
void <B>parseConditionalSect</B>()
                    throws java.lang.Exception</PRE>
<DL>
<DD>Parse a conditional section.
 [63] conditionalSect ::= includeSect || ignoreSect
 [64] includeSect ::= '<![' %'INCLUDE' '[' (%markupdecl*)* ']]>'
 [65] ignoreSect ::= '<![' %'IGNORE' '[' ignoreSectContents* ']]>'
 [66] ignoreSectContents ::= ((SkipLit | Comment | PI) -(Char* ']]>'))
                           | ('<![' ignoreSectContents* ']]>')
                           | (Char - (']' | [<'"]))
                           | ('<!' (Char - ('-' | '[')))
 *NOTE: the '<![' has already been read.
 *TODO: verify that I am handling ignoreSectContents right.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseCharRef()"><!-- --></A><H3>
parseCharRef</H3>
<PRE>
void <B>parseCharRef</B>()
            throws java.lang.Exception</PRE>
<DL>
<DD>Read a character reference.
 [67] CharRef ::= '&#' [0-9]+ ';' | '&#x' [0-9a-fA-F]+ ';'
 *NOTE: the '&#' has already been read.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseEntityRef(boolean)"><!-- --></A><H3>
parseEntityRef</H3>
<PRE>
void <B>parseEntityRef</B>(boolean&nbsp;externalAllowed)
              throws java.lang.Exception</PRE>
<DL>
<DD>Parse a reference.
 [69] EntityRef ::= '&' Name ';'
 *NOTE: the '&' has already been read.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>externalAllowed</CODE> - External entities are allowed here.
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parsePEReference(boolean)"><!-- --></A><H3>
parsePEReference</H3>
<PRE>
void <B>parsePEReference</B>(boolean&nbsp;isEntityValue)
                throws java.lang.Exception</PRE>
<DL>
<DD>Parse a parameter entity reference.
 [70] PEReference ::= '%' Name ';'
 *NOTE: the '%' has already been read.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseEntityDecl()"><!-- --></A><H3>
parseEntityDecl</H3>
<PRE>
void <B>parseEntityDecl</B>()
               throws java.lang.Exception</PRE>
<DL>
<DD>Parse an entity declaration.
 [71] EntityDecl ::= '<!ENTITY' S %Name S %EntityDef S? '>'
                   | '<!ENTITY' S '%' S %Name S %EntityDef S? '>'
 [72] EntityDef ::= EntityValue | ExternalDef
 [73] ExternalDef ::= ExternalID %NDataDecl?
 [74] ExternalID ::= 'SYSTEM' S SystemLiteral
                   | 'PUBLIC' S PubidLiteral S SystemLiteral
 [75] NDataDecl ::= S %'NDATA' S %Name
 *NOTE: the '<!ENTITY' has already been read.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseNotationDecl()"><!-- --></A><H3>
parseNotationDecl</H3>
<PRE>
void <B>parseNotationDecl</B>()
                 throws java.lang.Exception</PRE>
<DL>
<DD>Parse a notation declaration.
 [81] NotationDecl ::= '<!NOTATION' S %Name S %ExternalID S? '>'
 *NOTE: the '<!NOTATION' has already been read.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parsePCData()"><!-- --></A><H3>
parsePCData</H3>
<PRE>
void <B>parsePCData</B>()
           throws java.lang.Exception</PRE>
<DL>
<DD>Parse PCDATA.
 <pre>
 [16] PCData ::= [^&lt;&amp;]*
 </pre>
 <p>The trick here is that the data stays in the dataBuffer without
 necessarily being converted to a string right away.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="requireWhitespace()"><!-- --></A><H3>
requireWhitespace</H3>
<PRE>
void <B>requireWhitespace</B>()
                 throws java.lang.Exception</PRE>
<DL>
<DD>Require whitespace characters.
 [1] S ::= (#x20 | #x9 | #xd | #xa)+
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseWhitespace()"><!-- --></A><H3>
parseWhitespace</H3>
<PRE>
void <B>parseWhitespace</B>()
               throws java.lang.Exception</PRE>
<DL>
<DD>Parse whitespace characters, and leave them in the data buffer.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="skipWhitespace()"><!-- --></A><H3>
skipWhitespace</H3>
<PRE>
void <B>skipWhitespace</B>()
              throws java.lang.Exception</PRE>
<DL>
<DD>Skip whitespace characters.
 [1] S ::= (#x20 | #x9 | #xd | #xa)+
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="readNmtoken(boolean)"><!-- --></A><H3>
readNmtoken</H3>
<PRE>
java.lang.String <B>readNmtoken</B>(boolean&nbsp;isName)
                       throws java.lang.Exception</PRE>
<DL>
<DD>Read a name or name token.
 [5] Name ::= (Letter | '_' | ':') (NameChar)*
 [7] Nmtoken ::= (NameChar)+
 *NOTE: [6] is implemented implicitly where required.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="readLiteral(int)"><!-- --></A><H3>
readLiteral</H3>
<PRE>
java.lang.String <B>readLiteral</B>(int&nbsp;flags)
                       throws java.lang.Exception</PRE>
<DL>
<DD>Read a literal.
 [10] AttValue ::= '"' ([^<&"] | Reference)* '"'
                 | "'" ([^<&'] | Reference)* "'"
 [11] SystemLiteral ::= '"' URLchar* '"' | "'" (URLchar - "'")* "'"
 [13] PubidLiteral ::= '"' PubidChar* '"' | "'" (PubidChar - "'")* "'"
 [9] EntityValue ::= '"' ([^%&"] | PEReference | Reference)* '"'
                   | "'" ([^%&'] | PEReference | Reference)* "'"
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="readExternalIds(boolean)"><!-- --></A><H3>
readExternalIds</H3>
<PRE>
java.lang.String[] <B>readExternalIds</B>(boolean&nbsp;inNotation)
                             throws java.lang.Exception</PRE>
<DL>
<DD>Try reading external identifiers.
 <p>The system identifier is not required for notations.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>inNotation</CODE> - Are we in a notation?
<DT><B>Returns:</B><DD>A two-member String array containing the identifiers.
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="isWhitespace(char)"><!-- --></A><H3>
isWhitespace</H3>
<PRE>
final boolean <B>isWhitespace</B>(char&nbsp;c)</PRE>
<DL>
<DD>Test if a character is whitespace.
 <pre>
 [1] S ::= (#x20 | #x9 | #xd | #xa)+
 </pre>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>c</CODE> - The character to test.
<DT><B>Returns:</B><DD>true if the character is whitespace.</DL>
</DD>
</DL>
<HR>

<A NAME="dataBufferAppend(char)"><!-- --></A><H3>
dataBufferAppend</H3>
<PRE>
void <B>dataBufferAppend</B>(char&nbsp;c)</PRE>
<DL>
<DD>Add a character to the data buffer.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="dataBufferAppend(java.lang.String)"><!-- --></A><H3>
dataBufferAppend</H3>
<PRE>
void <B>dataBufferAppend</B>(java.lang.String&nbsp;s)</PRE>
<DL>
<DD>Add a string to the data buffer.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="dataBufferAppend(char[], int, int)"><!-- --></A><H3>
dataBufferAppend</H3>
<PRE>
void <B>dataBufferAppend</B>(char[]&nbsp;ch,
                      int&nbsp;start,
                      int&nbsp;length)</PRE>
<DL>
<DD>Append (part of) a character array to the data buffer.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="dataBufferNormalize()"><!-- --></A><H3>
dataBufferNormalize</H3>
<PRE>
void <B>dataBufferNormalize</B>()</PRE>
<DL>
<DD>Normalise whitespace in the data buffer.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="dataBufferToString()"><!-- --></A><H3>
dataBufferToString</H3>
<PRE>
java.lang.String <B>dataBufferToString</B>()</PRE>
<DL>
<DD>Convert the data buffer to a string.
<P>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#intern(char[], int, int)"><CODE>intern(char[],int,int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="dataBufferFlush()"><!-- --></A><H3>
dataBufferFlush</H3>
<PRE>
void <B>dataBufferFlush</B>()
               throws java.lang.Exception</PRE>
<DL>
<DD>Flush the contents of the data buffer to the handler, if
 appropriate, and reset the buffer for new input.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="require(java.lang.String)"><!-- --></A><H3>
require</H3>
<PRE>
void <B>require</B>(java.lang.String&nbsp;delim)
       throws java.lang.Exception</PRE>
<DL>
<DD>Require a string to appear, or throw an exception.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="require(char)"><!-- --></A><H3>
require</H3>
<PRE>
void <B>require</B>(char&nbsp;delim)
       throws java.lang.Exception</PRE>
<DL>
<DD>Require a character to appear, or throw an exception.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="intern(java.lang.String)"><!-- --></A><H3>
intern</H3>
<PRE>
public java.lang.String <B>intern</B>(java.lang.String&nbsp;s)</PRE>
<DL>
<DD>Return an internalised version of a string.
 <p>&AElig;lfred uses this method to create an internalised version
 of all names and attribute values, so that it can test equality
 with <code>==</code> instead of <code>String.equals()</code>.
 <p>If you want to be able to test for equality in the same way,
 you can use this method to internalise your own strings first:
 <pre>
 String PARA = handler.intern("PARA");
 </pre>
 <p>Note that this will not return the same results as String.intern().
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>s</CODE> - The string to internalise.
<DT><B>Returns:</B><DD>An internalised version of the string.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#intern(char[], int, int)"><CODE>intern(char[],int,int)</CODE></A>, 
<CODE>String.intern()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="intern(char[], int, int)"><!-- --></A><H3>
intern</H3>
<PRE>
public java.lang.String <B>intern</B>(char[]&nbsp;ch,
                               int&nbsp;start,
                               int&nbsp;length)</PRE>
<DL>
<DD>Create an internalised string from a character array.
 <p>This is much more efficient than constructing a non-internalised
 string first, and then internalising it.
 <p>Note that this will not return the same results as String.intern().
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>ch</CODE> - an array of characters for building the string.<DD><CODE>start</CODE> - the starting position in the array.<DD><CODE>length</CODE> - the number of characters to place in the string.
<DT><B>Returns:</B><DD>an internalised string.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#intern(java.lang.String)"><CODE>intern(String)</CODE></A>, 
<CODE>String.intern()</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="extendArray(java.lang.Object, int, int)"><!-- --></A><H3>
extendArray</H3>
<PRE>
java.lang.Object <B>extendArray</B>(java.lang.Object&nbsp;array,
                             int&nbsp;currentSize,
                             int&nbsp;requiredSize)</PRE>
<DL>
<DD>Ensure the capacity of an array, allocating a new one if
 necessary.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="declaredElements()"><!-- --></A><H3>
declaredElements</H3>
<PRE>
public java.util.Enumeration <B>declaredElements</B>()</PRE>
<DL>
<DD>Get the declared elements for an XML document.
 <p>The results will be valid only after the DTD (if any) has been
 parsed.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>An enumeration of all element types declared for this
         document (as Strings).<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getElementContentType(java.lang.String)"><CODE>getElementContentType(java.lang.String)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#getElementContentModel(java.lang.String)"><CODE>getElementContentModel(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getElementContentType(java.lang.String)"><!-- --></A><H3>
getElementContentType</H3>
<PRE>
public int <B>getElementContentType</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD>Look up the content type of an element.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The element type name.
<DT><B>Returns:</B><DD>An integer constant representing the content type.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getElementContentModel(java.lang.String)"><CODE>getElementContentModel(java.lang.String)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#CONTENT_UNDECLARED"><CODE>CONTENT_UNDECLARED</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#CONTENT_ANY"><CODE>CONTENT_ANY</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#CONTENT_EMPTY"><CODE>CONTENT_EMPTY</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#CONTENT_MIXED"><CODE>CONTENT_MIXED</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#CONTENT_ELEMENTS"><CODE>CONTENT_ELEMENTS</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getElementContentModel(java.lang.String)"><!-- --></A><H3>
getElementContentModel</H3>
<PRE>
public java.lang.String <B>getElementContentModel</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD>Look up the content model of an element.
 <p>The result will always be null unless the content type is
 CONTENT_ELEMENTS or CONTENT_MIXED.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The element type name.
<DT><B>Returns:</B><DD>The normalised content model, as a string.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getElementContentType(java.lang.String)"><CODE>getElementContentType(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setElement(java.lang.String, int, java.lang.String, java.util.Hashtable)"><!-- --></A><H3>
setElement</H3>
<PRE>
void <B>setElement</B>(java.lang.String&nbsp;name,
                int&nbsp;contentType,
                java.lang.String&nbsp;contentModel,
                java.util.Hashtable&nbsp;attributes)
          throws java.lang.Exception</PRE>
<DL>
<DD>Register an element.
 Array format:
  element type
  attribute hash table
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getElementAttributes(java.lang.String)"><!-- --></A><H3>
getElementAttributes</H3>
<PRE>
java.util.Hashtable <B>getElementAttributes</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD>Look up the attribute hash table for an element.
 The hash table is the second item in the element array.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="declaredAttributes(java.lang.String)"><!-- --></A><H3>
declaredAttributes</H3>
<PRE>
public java.util.Enumeration <B>declaredAttributes</B>(java.lang.String&nbsp;elname)</PRE>
<DL>
<DD>Get the declared attributes for an element type.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>elname</CODE> - The name of the element type.
<DT><B>Returns:</B><DD>An Enumeration of all the attributes declared for
         a specific element type.  The results will be valid only
         after the DTD (if any) has been parsed.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeType(java.lang.String, java.lang.String)"><CODE>getAttributeType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeEnumeration(java.lang.String, java.lang.String)"><CODE>getAttributeEnumeration(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeDefaultValueType(java.lang.String, java.lang.String)"><CODE>getAttributeDefaultValueType(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeDefaultValue(java.lang.String, java.lang.String)"><CODE>getAttributeDefaultValue(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeExpandedValue(java.lang.String, java.lang.String)"><CODE>getAttributeExpandedValue(java.lang.String, java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getAttributeType(java.lang.String, java.lang.String)"><!-- --></A><H3>
getAttributeType</H3>
<PRE>
public int <B>getAttributeType</B>(java.lang.String&nbsp;name,
                            java.lang.String&nbsp;aname)</PRE>
<DL>
<DD>Retrieve the declared type of an attribute.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The name of the associated element.<DD><CODE>aname</CODE> - The name of the attribute.
<DT><B>Returns:</B><DD>An integer constant representing the attribute type.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_UNDECLARED"><CODE>ATTRIBUTE_UNDECLARED</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_CDATA"><CODE>ATTRIBUTE_CDATA</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_ID"><CODE>ATTRIBUTE_ID</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_IDREF"><CODE>ATTRIBUTE_IDREF</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_IDREFS"><CODE>ATTRIBUTE_IDREFS</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_ENTITY"><CODE>ATTRIBUTE_ENTITY</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_ENTITIES"><CODE>ATTRIBUTE_ENTITIES</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_NMTOKEN"><CODE>ATTRIBUTE_NMTOKEN</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_NMTOKENS"><CODE>ATTRIBUTE_NMTOKENS</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_ENUMERATED"><CODE>ATTRIBUTE_ENUMERATED</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_NOTATION"><CODE>ATTRIBUTE_NOTATION</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getAttributeEnumeration(java.lang.String, java.lang.String)"><!-- --></A><H3>
getAttributeEnumeration</H3>
<PRE>
public java.lang.String <B>getAttributeEnumeration</B>(java.lang.String&nbsp;name,
                                                java.lang.String&nbsp;aname)</PRE>
<DL>
<DD>Retrieve the allowed values for an enumerated attribute type.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The name of the associated element.<DD><CODE>aname</CODE> - The name of the attribute.
<DT><B>Returns:</B><DD>A string containing the token list.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_ENUMERATED"><CODE>ATTRIBUTE_ENUMERATED</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_NOTATION"><CODE>ATTRIBUTE_NOTATION</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getAttributeDefaultValue(java.lang.String, java.lang.String)"><!-- --></A><H3>
getAttributeDefaultValue</H3>
<PRE>
public java.lang.String <B>getAttributeDefaultValue</B>(java.lang.String&nbsp;name,
                                                 java.lang.String&nbsp;aname)</PRE>
<DL>
<DD>Retrieve the default value of a declared attribute.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The name of the associated element.<DD><CODE>aname</CODE> - The name of the attribute.
<DT><B>Returns:</B><DD>The default value, or null if the attribute was
         #IMPLIED or simply undeclared and unspecified.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeExpandedValue(java.lang.String, java.lang.String)"><CODE>getAttributeExpandedValue(java.lang.String, java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getAttributeExpandedValue(java.lang.String, java.lang.String)"><!-- --></A><H3>
getAttributeExpandedValue</H3>
<PRE>
public java.lang.String <B>getAttributeExpandedValue</B>(java.lang.String&nbsp;name,
                                                  java.lang.String&nbsp;aname)</PRE>
<DL>
<DD>Retrieve the expanded value of a declared attribute.
 <p>All general entities will be expanded.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - The name of the associated element.<DD><CODE>aname</CODE> - The name of the attribute.
<DT><B>Returns:</B><DD>The expanded default value, or null if the attribute was
         #IMPLIED or simply undeclared<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getAttributeDefaultValue(java.lang.String, java.lang.String)"><CODE>getAttributeDefaultValue(java.lang.String, java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getAttributeDefaultValueType(java.lang.String, java.lang.String)"><!-- --></A><H3>
getAttributeDefaultValueType</H3>
<PRE>
public int <B>getAttributeDefaultValueType</B>(java.lang.String&nbsp;name,
                                        java.lang.String&nbsp;aname)</PRE>
<DL>
<DD>Retrieve the default value type of a declared attribute.
<P>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_DEFAULT_SPECIFIED"><CODE>ATTRIBUTE_DEFAULT_SPECIFIED</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_DEFAULT_IMPLIED"><CODE>ATTRIBUTE_DEFAULT_IMPLIED</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_DEFAULT_REQUIRED"><CODE>ATTRIBUTE_DEFAULT_REQUIRED</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#ATTRIBUTE_DEFAULT_FIXED"><CODE>ATTRIBUTE_DEFAULT_FIXED</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setAttribute(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, int)"><!-- --></A><H3>
setAttribute</H3>
<PRE>
void <B>setAttribute</B>(java.lang.String&nbsp;elName,
                  java.lang.String&nbsp;name,
                  int&nbsp;type,
                  java.lang.String&nbsp;enumeration,
                  java.lang.String&nbsp;value,
                  int&nbsp;valueType)
            throws java.lang.Exception</PRE>
<DL>
<DD>Register an attribute declaration for later retrieval.
 Format:
 - String type
 - String default value
 - int value type
 *TODO: do something with attribute types.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getAttribute(java.lang.String, java.lang.String)"><!-- --></A><H3>
getAttribute</H3>
<PRE>
java.lang.Object[] <B>getAttribute</B>(java.lang.String&nbsp;elName,
                                java.lang.String&nbsp;name)</PRE>
<DL>
<DD>Retrieve the three-member array representing an
 attribute declaration.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="declaredEntities()"><!-- --></A><H3>
declaredEntities</H3>
<PRE>
public java.util.Enumeration <B>declaredEntities</B>()</PRE>
<DL>
<DD>Get declared entities.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>An Enumeration of all the entities declared for
         this XML document.  The results will be valid only
         after the DTD (if any) has been parsed.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntityType(java.lang.String)"><CODE>getEntityType(java.lang.String)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntityPublicId(java.lang.String)"><CODE>getEntityPublicId(java.lang.String)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntitySystemId(java.lang.String)"><CODE>getEntitySystemId(java.lang.String)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntityValue(java.lang.String)"><CODE>getEntityValue(java.lang.String)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntityNotationName(java.lang.String)"><CODE>getEntityNotationName(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getEntityType(java.lang.String)"><!-- --></A><H3>
getEntityType</H3>
<PRE>
public int <B>getEntityType</B>(java.lang.String&nbsp;ename)</PRE>
<DL>
<DD>Find the type of an entity.
<P>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#ENTITY_UNDECLARED"><CODE>ENTITY_UNDECLARED</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#ENTITY_INTERNAL"><CODE>ENTITY_INTERNAL</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#ENTITY_NDATA"><CODE>ENTITY_NDATA</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#ENTITY_TEXT"><CODE>ENTITY_TEXT</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getEntityPublicId(java.lang.String)"><!-- --></A><H3>
getEntityPublicId</H3>
<PRE>
public java.lang.String <B>getEntityPublicId</B>(java.lang.String&nbsp;ename)</PRE>
<DL>
<DD>Return an external entity's public identifier, if any.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>ename</CODE> - The name of the external entity.
<DT><B>Returns:</B><DD>The entity's system identifier, or null if the
         entity was not declared, if it is not an
         external entity, or if no public identifier was
         provided.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntityType(java.lang.String)"><CODE>getEntityType(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getEntitySystemId(java.lang.String)"><!-- --></A><H3>
getEntitySystemId</H3>
<PRE>
public java.lang.String <B>getEntitySystemId</B>(java.lang.String&nbsp;ename)</PRE>
<DL>
<DD>Return an external entity's system identifier.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>ename</CODE> - The name of the external entity.
<DT><B>Returns:</B><DD>The entity's system identifier, or null if the
         entity was not declared, or if it is not an
         external entity.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntityType(java.lang.String)"><CODE>getEntityType(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getEntityValue(java.lang.String)"><!-- --></A><H3>
getEntityValue</H3>
<PRE>
public java.lang.String <B>getEntityValue</B>(java.lang.String&nbsp;ename)</PRE>
<DL>
<DD>Return the value of an internal entity.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>ename</CODE> - The name of the internal entity.
<DT><B>Returns:</B><DD>The entity's value, or null if the entity was
         not declared, or if it is not an internal entity.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntityType(java.lang.String)"><CODE>getEntityType(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getEntityNotationName(java.lang.String)"><!-- --></A><H3>
getEntityNotationName</H3>
<PRE>
public java.lang.String <B>getEntityNotationName</B>(java.lang.String&nbsp;eName)</PRE>
<DL>
<DD>Get the notation name associated with an NDATA entity.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>The associated notation name, or null if the
         entity was not declared, or if it is not an
         NDATA entity.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getEntityType(java.lang.String)"><CODE>getEntityType(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setInternalEntity(java.lang.String, java.lang.String)"><!-- --></A><H3>
setInternalEntity</H3>
<PRE>
void <B>setInternalEntity</B>(java.lang.String&nbsp;eName,
                       java.lang.String&nbsp;value)</PRE>
<DL>
<DD>Register an entity declaration for later retrieval.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setExternalDataEntity(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"><!-- --></A><H3>
setExternalDataEntity</H3>
<PRE>
void <B>setExternalDataEntity</B>(java.lang.String&nbsp;eName,
                           java.lang.String&nbsp;pubid,
                           java.lang.String&nbsp;sysid,
                           java.lang.String&nbsp;nName)</PRE>
<DL>
<DD>Register an external data entity.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setExternalTextEntity(java.lang.String, java.lang.String, java.lang.String)"><!-- --></A><H3>
setExternalTextEntity</H3>
<PRE>
void <B>setExternalTextEntity</B>(java.lang.String&nbsp;eName,
                           java.lang.String&nbsp;pubid,
                           java.lang.String&nbsp;sysid)</PRE>
<DL>
<DD>Register an external text entity.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setEntity(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"><!-- --></A><H3>
setEntity</H3>
<PRE>
void <B>setEntity</B>(java.lang.String&nbsp;eName,
               int&nbsp;eClass,
               java.lang.String&nbsp;pubid,
               java.lang.String&nbsp;sysid,
               java.lang.String&nbsp;value,
               java.lang.String&nbsp;nName)</PRE>
<DL>
<DD>Register an entity declaration for later retrieval.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="declaredNotations()"><!-- --></A><H3>
declaredNotations</H3>
<PRE>
public java.util.Enumeration <B>declaredNotations</B>()</PRE>
<DL>
<DD>Get declared notations.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>An Enumeration of all the notations declared for
         this XML document.  The results will be valid only
         after the DTD (if any) has been parsed.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getNotationPublicId(java.lang.String)"><CODE>getNotationPublicId(java.lang.String)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#getNotationSystemId(java.lang.String)"><CODE>getNotationSystemId(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getNotationPublicId(java.lang.String)"><!-- --></A><H3>
getNotationPublicId</H3>
<PRE>
public java.lang.String <B>getNotationPublicId</B>(java.lang.String&nbsp;nname)</PRE>
<DL>
<DD>Look up the public identifier for a notation.
 You will normally use this method to look up a notation
 that was provided as an attribute value or for an NDATA entity.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nname</CODE> - The name of the notation.
<DT><B>Returns:</B><DD>A string containing the public identifier, or null
         if none was provided or if no such notation was
         declared.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getNotationSystemId(java.lang.String)"><CODE>getNotationSystemId(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getNotationSystemId(java.lang.String)"><!-- --></A><H3>
getNotationSystemId</H3>
<PRE>
public java.lang.String <B>getNotationSystemId</B>(java.lang.String&nbsp;nname)</PRE>
<DL>
<DD>Look up the system identifier for a notation.
 You will normally use this method to look up a notation
 that was provided as an attribute value or for an NDATA entity.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nname</CODE> - The name of the notation.
<DT><B>Returns:</B><DD>A string containing the system identifier, or null
         if no such notation was declared.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#getNotationPublicId(java.lang.String)"><CODE>getNotationPublicId(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setNotation(java.lang.String, java.lang.String, java.lang.String)"><!-- --></A><H3>
setNotation</H3>
<PRE>
void <B>setNotation</B>(java.lang.String&nbsp;nname,
                 java.lang.String&nbsp;pubid,
                 java.lang.String&nbsp;sysid)
           throws java.lang.Exception</PRE>
<DL>
<DD>Register a notation declaration for later retrieval.
 Format:
 - public id
 - system id
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getLineNumber()"><!-- --></A><H3>
getLineNumber</H3>
<PRE>
public int <B>getLineNumber</B>()</PRE>
<DL>
<DD>Return the current line number.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getColumnNumber()"><!-- --></A><H3>
getColumnNumber</H3>
<PRE>
public int <B>getColumnNumber</B>()</PRE>
<DL>
<DD>Return the current column number.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="readCh()"><!-- --></A><H3>
readCh</H3>
<PRE>
char <B>readCh</B>()
      throws java.lang.Exception</PRE>
<DL>
<DD>Read a single character from the readBuffer.
 <p>The readDataChunk() method maintains the buffer.
 <p>If we hit the end of an entity, try to pop the stack and
 keep going.
 <p>(This approach doesn't really enforce XML's rules about
 entity boundaries, but this is not currently a validating
 parser).
 <p>This routine also attempts to keep track of the current
 position in external entities, but it's not entirely accurate.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>The next available input character.
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#unread(char)"><CODE>unread(char)</CODE></A>, 
<CODE>#unread(String)</CODE>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#readDataChunk()"><CODE>readDataChunk()</CODE></A>, 
<CODE>#readBuffer</CODE>, 
<CODE>#line</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="unread(char)"><!-- --></A><H3>
unread</H3>
<PRE>
void <B>unread</B>(char&nbsp;c)
      throws java.lang.Exception</PRE>
<DL>
<DD>Push a single character back onto the current input stream.
 <p>This method usually pushes the character back onto
 the readBuffer, while the unread(String) method treats the
 string as a new internal entity.
 <p>I don't think that this would ever be called with 
 readBufferPos = 0, because the methods always reads a character
 before unreading it, but just in case, I've added a boundary
 condition.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>c</CODE> - The character to push back.
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#readCh()"><CODE>readCh()</CODE></A>, 
<CODE>#unread(String)</CODE>, 
<CODE>#unread(char[])</CODE>, 
<CODE>#readBuffer</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="unread(char[], int)"><!-- --></A><H3>
unread</H3>
<PRE>
void <B>unread</B>(char[]&nbsp;ch,
            int&nbsp;length)
      throws java.lang.Exception</PRE>
<DL>
<DD>Push a char array back onto the current input stream.
 <p>NOTE: you must <em>never</em> push back characters that you
 haven't actually read: use pushString() instead.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#readCh()"><CODE>readCh()</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#unread(char)"><CODE>unread(char)</CODE></A>, 
<CODE>#unread(String)</CODE>, 
<CODE>#readBuffer</CODE>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#pushString(java.lang.String, java.lang.String)"><CODE>pushString(java.lang.String, java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="pushURL(java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String)"><!-- --></A><H3>
pushURL</H3>
<PRE>
void <B>pushURL</B>(java.lang.String&nbsp;ename,
             java.lang.String&nbsp;publicId,
             java.lang.String&nbsp;systemId,
             java.io.Reader&nbsp;reader,
             java.io.InputStream&nbsp;stream,
             java.lang.String&nbsp;encoding)
       throws java.lang.Exception</PRE>
<DL>
<DD>Push a new external input source.
 <p>The source will be either an external text entity, or the DTD
 external subset.
 <p>TO DO: Right now, this method always attempts to autodetect
 the encoding; in the future, it should allow the caller to 
 request an encoding explicitly, and it should also look at the
 headers with an HTTP connection.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlHandler.html#resolveEntity(java.lang.String, java.lang.String)"><CODE>XmlHandler.resolveEntity(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#pushString(java.lang.String, java.lang.String)"><CODE>pushString(java.lang.String, java.lang.String)</CODE></A>, 
<CODE>#sourceType</CODE>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#pushInput(java.lang.String)"><CODE>pushInput(java.lang.String)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#detectEncoding()"><CODE>detectEncoding()</CODE></A>, 
<CODE>#sourceType</CODE>, 
<CODE>#readBuffer</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="tryEncodingDecl(boolean)"><!-- --></A><H3>
tryEncodingDecl</H3>
<PRE>
void <B>tryEncodingDecl</B>(boolean&nbsp;ignoreEncoding)
               throws java.lang.Exception</PRE>
<DL>
<DD>Check for an encoding declaration.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="detectEncoding()"><!-- --></A><H3>
detectEncoding</H3>
<PRE>
void <B>detectEncoding</B>()
              throws java.lang.Exception</PRE>
<DL>
<DD>Attempt to detect the encoding of an entity.
 <p>The trick here (as suggested in the XML standard) is that
 any entity not in UTF-8, or in UCS-2 with a byte-order mark, 
 <b>must</b> begin with an XML declaration or an encoding
 declaration; we simply have to look for "&lt;?XML" in various
 encodings.
 <p>This method has no way to distinguish among 8-bit encodings.
 Instead, it assumes UTF-8, then (possibly) revises its assumption
 later in checkEncoding().  Any ASCII-derived 8-bit encoding
 should work, but most will be rejected later by checkEncoding().
 <p>I don't currently detect EBCDIC, since I'm concerned that it
 could also be a valid UTF-8 sequence; I'll have to do more checking
 later.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#tryEncoding(byte[], byte, byte, byte, byte)"><CODE>tryEncoding(byte[], byte, byte, byte, byte)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#tryEncoding(byte[], byte, byte)"><CODE>tryEncoding(byte[], byte, byte)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#checkEncoding(java.lang.String, boolean)"><CODE>checkEncoding(java.lang.String, boolean)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#read8bitEncodingDeclaration()"><CODE>read8bitEncodingDeclaration()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="tryEncoding(byte[], byte, byte, byte, byte)"><!-- --></A><H3>
tryEncoding</H3>
<PRE>
boolean <B>tryEncoding</B>(byte[]&nbsp;sig,
                    byte&nbsp;b1,
                    byte&nbsp;b2,
                    byte&nbsp;b3,
                    byte&nbsp;b4)</PRE>
<DL>
<DD>Check for a four-byte signature.
 <p>Utility routine for detectEncoding().
 <p>Always looks for some part of "<?XML" in a specific encoding.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sig</CODE> - The first four bytes read.<DD><CODE>b1</CODE> - The first byte of the signature<DD><CODE>b2</CODE> - The second byte of the signature<DD><CODE>b3</CODE> - The third byte of the signature<DD><CODE>b4</CODE> - The fourth byte of the signature<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#detectEncoding()"><CODE>detectEncoding()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="tryEncoding(byte[], byte, byte)"><!-- --></A><H3>
tryEncoding</H3>
<PRE>
boolean <B>tryEncoding</B>(byte[]&nbsp;sig,
                    byte&nbsp;b1,
                    byte&nbsp;b2)</PRE>
<DL>
<DD>Check for a two-byte signature.
 <p>Looks for a UCS-2 byte-order mark.
 <p>Utility routine for detectEncoding().
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sig</CODE> - The first four bytes read.<DD><CODE>b1</CODE> - The first byte of the signature<DD><CODE>b2</CODE> - The second byte of the signature<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#detectEncoding()"><CODE>detectEncoding()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="pushString(java.lang.String, java.lang.String)"><!-- --></A><H3>
pushString</H3>
<PRE>
void <B>pushString</B>(java.lang.String&nbsp;ename,
                java.lang.String&nbsp;s)
          throws java.lang.Exception</PRE>
<DL>
<DD>This method pushes a string back onto input.
 <p>It is useful either as the expansion of an internal entity, 
 or for backtracking during the parse.
 <p>Call pushCharArray() to do the actual work.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>s</CODE> - The string to push back onto input.
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#pushCharArray(java.lang.String, char[], int, int)"><CODE>pushCharArray(java.lang.String, char[], int, int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="pushCharArray(java.lang.String, char[], int, int)"><!-- --></A><H3>
pushCharArray</H3>
<PRE>
void <B>pushCharArray</B>(java.lang.String&nbsp;ename,
                   char[]&nbsp;ch,
                   int&nbsp;start,
                   int&nbsp;length)
             throws java.lang.Exception</PRE>
<DL>
<DD>Push a new internal input source.
 <p>This method is useful for expanding an internal entity,
 or for unreading a string of characters.  It creates a new
 readBuffer containing the characters in the array, instead
 of characters converted from an input byte stream.
 <p>I've added a couple of optimisations: don't push zero-
 length strings, and just push back a single character
 for 1-character strings; this should save some time and memory.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>ch</CODE> - The char array to push.
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#pushString(java.lang.String, java.lang.String)"><CODE>pushString(java.lang.String, java.lang.String)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#pushURL(java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String)"><CODE>pushURL(java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String)</CODE></A>, 
<CODE>#readBuffer</CODE>, 
<CODE>#sourceType</CODE>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#pushInput(java.lang.String)"><CODE>pushInput(java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="pushInput(java.lang.String)"><!-- --></A><H3>
pushInput</H3>
<PRE>
void <B>pushInput</B>(java.lang.String&nbsp;ename)
         throws java.lang.Exception</PRE>
<DL>
<DD>Save the current input source onto the stack.
 <p>This method saves all of the global variables associated with
 the current input source, so that they can be restored when a new
 input source has finished.  It also tests for entity recursion.
 <p>The method saves the following global variables onto a stack
 using a fixed-length array:
 <ol>
 <li>sourceType
 <li>externalEntity
 <li>readBuffer
 <li>readBufferPos
 <li>readBufferLength
 <li>line
 <li>encoding
 </ol>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>ename</CODE> - The name of the entity (if any) causing the new input.
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#popInput()"><CODE>popInput()</CODE></A>, 
<CODE>#sourceType</CODE>, 
<CODE>#externalEntity</CODE>, 
<CODE>#readBuffer</CODE>, 
<CODE>#readBufferPos</CODE>, 
<CODE>#readBufferLength</CODE>, 
<CODE>#line</CODE>, 
<CODE>#encoding</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="popInput()"><!-- --></A><H3>
popInput</H3>
<PRE>
void <B>popInput</B>()
        throws java.lang.Exception</PRE>
<DL>
<DD>Restore a previous input source.
 <p>This method restores all of the global variables associated with
 the current input source.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.EOFException</CODE> - If there are no more entries on the input stack.
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#pushInput(java.lang.String)"><CODE>pushInput(java.lang.String)</CODE></A>, 
<CODE>#sourceType</CODE>, 
<CODE>#externalEntity</CODE>, 
<CODE>#readBuffer</CODE>, 
<CODE>#readBufferPos</CODE>, 
<CODE>#readBufferLength</CODE>, 
<CODE>#line</CODE>, 
<CODE>#encoding</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="tryRead(char)"><!-- --></A><H3>
tryRead</H3>
<PRE>
boolean <B>tryRead</B>(char&nbsp;delim)
          throws java.lang.Exception</PRE>
<DL>
<DD>Return true if we can read the expected character.
 <p>Note that the character will be removed from the input stream
 on success, but will be put back on failure.  Do not attempt to
 read the character again if the method succeeds.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>delim</CODE> - The character that should appear next.  For a
              insensitive match, you must supply this in upper-case.
<DT><B>Returns:</B><DD>true if the character was successfully read, or false if
         it was not.
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#tryRead(java.lang.String)"><CODE>tryRead(String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="tryRead(java.lang.String)"><!-- --></A><H3>
tryRead</H3>
<PRE>
boolean <B>tryRead</B>(java.lang.String&nbsp;delim)
          throws java.lang.Exception</PRE>
<DL>
<DD>Return true if we can read the expected string.
 <p>This is simply a convenience method.
 <p>Note that the string will be removed from the input stream
 on success, but will be put back on failure.  Do not attempt to
 read the string again if the method succeeds.
 <p>This method will push back a character rather than an
 array whenever possible (probably the majority of cases).
 <p><b>NOTE:</b> This method currently has a hard-coded limit
 of 100 characters for the delimiter.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>delim</CODE> - The string that should appear next.
<DT><B>Returns:</B><DD>true if the string was successfully read, or false if
         it was not.
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#tryRead(char)"><CODE>tryRead(char)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="tryWhitespace()"><!-- --></A><H3>
tryWhitespace</H3>
<PRE>
boolean <B>tryWhitespace</B>()
                throws java.lang.Exception</PRE>
<DL>
<DD>Return true if we can read some whitespace.
 <p>This is simply a convenience method.
 <p>This method will push back a character rather than an
 array whenever possible (probably the majority of cases).
<P>
<DD><DL>

<DT><B>Returns:</B><DD>true if whitespace was found.
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseUntil(java.lang.String)"><!-- --></A><H3>
parseUntil</H3>
<PRE>
void <B>parseUntil</B>(java.lang.String&nbsp;delim)
          throws java.lang.Exception</PRE>
<DL>
<DD>Read all data until we find the specified string.
 <p>This is especially useful for scanning marked sections.
 <p>This is a a little inefficient right now, since it calls tryRead()
 for every character.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>delim</CODE> - The string delimiter
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><CODE>#tryRead(String, boolean)</CODE>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#readCh()"><CODE>readCh()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="skipUntil(java.lang.String)"><!-- --></A><H3>
skipUntil</H3>
<PRE>
void <B>skipUntil</B>(java.lang.String&nbsp;delim)
         throws java.lang.Exception</PRE>
<DL>
<DD>Skip all data until we find the specified string.
 <p>This is especially useful for scanning comments.
 <p>This is a a little inefficient right now, since it calls tryRead()
 for every character.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>delim</CODE> - The string delimiter
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><CODE>#tryRead(String, boolean)</CODE>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#readCh()"><CODE>readCh()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="read8bitEncodingDeclaration()"><!-- --></A><H3>
read8bitEncodingDeclaration</H3>
<PRE>
void <B>read8bitEncodingDeclaration</B>()
                           throws java.lang.Exception</PRE>
<DL>
<DD>Read just the encoding declaration (or XML declaration) at the 
 start of an external entity.
 When this method is called, we know that the declaration is
 present (or appears to be).  We also know that the entity is
 in some sort of ASCII-derived 8-bit encoding.
 The idea of this is to let us read what the 8-bit encoding is
 before we've committed to converting any more of the file; the
 XML or encoding declaration must be in 7-bit ASCII, so we're
 safe as long as we don't go past it.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="readDataChunk()"><!-- --></A><H3>
readDataChunk</H3>
<PRE>
void <B>readDataChunk</B>()
             throws java.lang.Exception</PRE>
<DL>
<DD>Read a chunk of data from an external input source.
 <p>This is simply a front-end that fills the rawReadBuffer
 with bytes, then calls the appropriate encoding handler.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><CODE>#encoding</CODE>, 
<CODE>#rawReadBuffer</CODE>, 
<CODE>#readBuffer</CODE>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#filterCR()"><CODE>filterCR()</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#copyUtf8ReadBuffer(int)"><CODE>copyUtf8ReadBuffer(int)</CODE></A>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#copyIso8859_1ReadBuffer(int)"><CODE>copyIso8859_1ReadBuffer(int)</CODE></A>, 
<CODE>#copyUcs_2ReadBuffer</CODE>, 
<CODE>#copyUcs_4ReadBuffer</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="filterCR()"><!-- --></A><H3>
filterCR</H3>
<PRE>
void <B>filterCR</B>()</PRE>
<DL>
<DD>Filter carriage returns in the read buffer.
 <p>CRLF becomes LF; CR becomes LF.
<P>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#readDataChunk()"><CODE>readDataChunk()</CODE></A>, 
<CODE>#readBuffer</CODE>, 
<CODE>#readBufferOverflow</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="copyUtf8ReadBuffer(int)"><!-- --></A><H3>
copyUtf8ReadBuffer</H3>
<PRE>
void <B>copyUtf8ReadBuffer</B>(int&nbsp;count)
                  throws java.lang.Exception</PRE>
<DL>
<DD>Convert a buffer of UTF-8-encoded bytes into UTF-16 characters.
 <p>When readDataChunk() calls this method, the raw bytes are in 
 rawReadBuffer, and the final characters will appear in 
 readBuffer.
 <p>The tricky part of this is dealing with UTF-8 multi-byte 
 sequences, but it doesn't seem to slow things down too much.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>count</CODE> - The number of bytes to convert.
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#readDataChunk()"><CODE>readDataChunk()</CODE></A>, 
<CODE>#rawReadBuffer</CODE>, 
<CODE>#readBuffer</CODE>, 
<A HREF="../../../hhreco/util/aelfred/XmlParser.html#getNextUtf8Byte(int, int)"><CODE>getNextUtf8Byte(int, int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getNextUtf8Byte(int, int)"><!-- --></A><H3>
getNextUtf8Byte</H3>
<PRE>
int <B>getNextUtf8Byte</B>(int&nbsp;pos,
                    int&nbsp;count)
              throws java.lang.Exception</PRE>
<DL>
<DD>Return the next byte value in a UTF-8 sequence.
 If it is not possible to get a byte from the current
 entity, throw an exception.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pos</CODE> - The current position in the rawReadBuffer.<DD><CODE>count</CODE> - The number of bytes in the rawReadBuffer
<DT><B>Returns:</B><DD>The significant six bits of a non-initial byte in
         a UTF-8 sequence.
<DT><B>Throws:</B>
<DD><CODE>java.io.EOFException</CODE> - If the sequence is incomplete.
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="copyIso8859_1ReadBuffer(int)"><!-- --></A><H3>
copyIso8859_1ReadBuffer</H3>
<PRE>
void <B>copyIso8859_1ReadBuffer</B>(int&nbsp;count)</PRE>
<DL>
<DD>Convert a buffer of ISO-8859-1-encoded bytes into UTF-16 characters.
 <p>When readDataChunk() calls this method, the raw bytes are in 
 rawReadBuffer, and the final characters will appear in 
 readBuffer.
 <p>This is a direct conversion, with no tricks.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>count</CODE> - The number of bytes to convert.<DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#readDataChunk()"><CODE>readDataChunk()</CODE></A>, 
<CODE>#rawReadBuffer</CODE>, 
<CODE>#readBuffer</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="copyUcs2ReadBuffer(int, int, int)"><!-- --></A><H3>
copyUcs2ReadBuffer</H3>
<PRE>
void <B>copyUcs2ReadBuffer</B>(int&nbsp;count,
                        int&nbsp;shift1,
                        int&nbsp;shift2)
                  throws java.lang.Exception</PRE>
<DL>
<DD>Convert a buffer of UCS-2-encoded bytes into UTF-16 characters.
 <p>When readDataChunk() calls this method, the raw bytes are in 
 rawReadBuffer, and the final characters will appear in 
 readBuffer.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>count</CODE> - The number of bytes to convert.<DD><CODE>shift1</CODE> - The number of bits to shift byte 1.<DD><CODE>shift2</CODE> - The number of bits to shift byte 2
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#readDataChunk()"><CODE>readDataChunk()</CODE></A>, 
<CODE>#rawReadBuffer</CODE>, 
<CODE>#readBuffer</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="copyUcs4ReadBuffer(int, int, int, int, int)"><!-- --></A><H3>
copyUcs4ReadBuffer</H3>
<PRE>
void <B>copyUcs4ReadBuffer</B>(int&nbsp;count,
                        int&nbsp;shift1,
                        int&nbsp;shift2,
                        int&nbsp;shift3,
                        int&nbsp;shift4)
                  throws java.lang.Exception</PRE>
<DL>
<DD>Convert a buffer of UCS-4-encoded bytes into UTF-16 characters.
 <p>When readDataChunk() calls this method, the raw bytes are in 
 rawReadBuffer, and the final characters will appear in 
 readBuffer.
 <p>Java has 16-bit chars, but this routine will attempt to use
 surrogates to encoding values between 0x00010000 and 0x000fffff.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>count</CODE> - The number of bytes to convert.<DD><CODE>shift1</CODE> - The number of bits to shift byte 1.<DD><CODE>shift2</CODE> - The number of bits to shift byte 2<DD><CODE>shift3</CODE> - The number of bits to shift byte 2<DD><CODE>shift4</CODE> - The number of bits to shift byte 2
<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE><DT><B>See Also:</B><DD><A HREF="../../../hhreco/util/aelfred/XmlParser.html#readDataChunk()"><CODE>readDataChunk()</CODE></A>, 
<CODE>#rawReadBuffer</CODE>, 
<CODE>#readBuffer</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="encodingError(java.lang.String, int, int)"><!-- --></A><H3>
encodingError</H3>
<PRE>
void <B>encodingError</B>(java.lang.String&nbsp;message,
                   int&nbsp;value,
                   int&nbsp;offset)
             throws java.lang.Exception</PRE>
<DL>
<DD>Report a character encoding error.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.lang.Exception</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="initializeVariables()"><!-- --></A><H3>
initializeVariables</H3>
<PRE>
void <B>initializeVariables</B>()</PRE>
<DL>
<DD>Re-initialize the variables for each parse.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="cleanupVariables()"><!-- --></A><H3>
cleanupVariables</H3>
<PRE>
void <B>cleanupVariables</B>()</PRE>
<DL>
<DD>Clean up after the parse to allow some garbage collection.
 Leave around anything that might be useful for queries.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/XmlParser.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../hhreco/util/aelfred/HandlerBase.html" title="class in hhreco.util.aelfred"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="XmlParser.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>

</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
